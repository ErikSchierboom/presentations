using System.Collections.Immutable;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace SourceGenerator;

[Generator]
public class ModelsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var additionalTexts = context.AdditionalTextsProvider
            .Where(text => Path.GetFileName(text.Path) == "Models.txt")
            .Collect();
        
        context.RegisterSourceOutput(additionalTexts, GenerateSource);
    }

    private static void GenerateSource(SourceProductionContext context, ImmutableArray<AdditionalText> additionalTexts)
    {
        var additionalText = additionalTexts.Single();
        var recordNames = additionalText.GetText()!.ToString().Split(',');
        foreach (var recordName in recordNames)
        {
            var record = RecordDeclaration(Token(SyntaxKind.RecordKeyword), recordName)
                .AddModifiers(
                    Token(SyntaxKind.PublicKeyword).WithLeadingTrivia(Comment("// <auto-generated>")),
                    Token(SyntaxKind.PartialKeyword))
                .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                .NormalizeWhitespace();
            context.AddSource($"{recordName}.g.cs", record.ToFullString());
        }
    }
}
