using System.Collections.Immutable;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace SourceGenerator;

[Generator]
public class ModelsGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var files = context.AdditionalTextsProvider
            .Where(f => Path.GetFileName(f.Path) == "Models.txt")
            .Collect();

        context.RegisterSourceOutput(files, GenerateCode);
    }

    private static void GenerateCode(SourceProductionContext context, ImmutableArray<AdditionalText> modelFiles)
    {
        foreach (var modelFile in modelFiles)
        {
            foreach (var line in modelFile.GetText()!.Lines)
            {
                var className = Path.GetFileNameWithoutExtension(line.ToString());
          
                var code = RecordDeclaration(Token(SyntaxKind.RecordKeyword), className)
                    .AddModifiers(
                        Token(SyntaxKind.PublicKeyword).WithLeadingTrivia(Comment("// <auto-generated>")),
                        Token(SyntaxKind.PartialKeyword))
                    .WithSemicolonToken(Token(SyntaxKind.SemicolonToken))
                    .NormalizeWhitespace();
                
                context.AddSource($"{className}.g.cs", code.ToFullString());
            }
        }
    }
}