using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace SourceGenerator.Tests;

public class ModelsGeneratorTests
{
    [Fact]
    public void GenerateClassesBasedOnJson()
    {
        var generator = new ModelsGenerator();
        var driver = CSharpGeneratorDriver.Create(generator)
            .AddAdditionalTexts([new AdditionalTextFile("./Models.txt", "Movie\nDirector\nActor")]);

        var compilation = CSharpCompilation.Create(nameof(ModelsGeneratorTests));
        driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out _);
        
        var expected = new Dictionary<string, string>
        {
            { "Movie.g.cs", $"// <auto-generated/>{Environment.NewLine}public partial record Movie;" },
            { "Director.g.cs", $"// <auto-generated/>{Environment.NewLine}public partial record Director;" },
            { "Actor.g.cs", $"// <auto-generated/>{Environment.NewLine}public partial record Actor;" }
        };
        var generatedFiles = newCompilation.SyntaxTrees
            .ToDictionary(syntaxTree => Path.GetFileName(syntaxTree.FilePath), syntaxTree => syntaxTree.ToString());
        Assert.Equivalent(expected, generatedFiles);
    }
}
